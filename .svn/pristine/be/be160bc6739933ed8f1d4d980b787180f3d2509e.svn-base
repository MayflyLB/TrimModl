#include "CurveAttrE.h"

const char CurveAttrE::curveTypeTitle[64] = "CurveType";//UF_ATTR_string
const char CurveAttrE::UPAssist[64] = "UPAssist";
const char CurveAttrE::UPTrime[64] = "UPTrime";
const char CurveAttrE::DwAssist[64] = "DwAssist";
const char CurveAttrE::DwTrim[64] = "DwTrim";
const char CurveAttrE::GroupFlagTitle[64] = "GroupFlag";//UF_ATTR_integer

void CurveAttrE::writeAttrToCurves(std::vector<TrimCurveData>& curveSet, CurveType cae)
{
    UF_ATTR_value_t attrValueTypeString;
    UF_ATTR_value_t attrValueGroupFlag;
    attrValueGroupFlag.type = UF_ATTR_integer;
    attrValueTypeString.type = UF_ATTR_string;
    UF_initialize();
    for (int i = 0; i < curveSet.size(); i++)
    {
        if (cae == UPType)
            attrValueTypeString.value.string = const_cast<char*> (UPTrime);
        else
            attrValueTypeString.value.string = const_cast<char*> (DwTrim);
        attrValueGroupFlag.value.integer = rand();
        for (int j = 0; j < curveSet[i].trim_->size(); j++)
        {
            UF_CALL(UF_ATTR_assign((*curveSet[i].trim_)[j]->curve, const_cast<char*>(curveTypeTitle), attrValueTypeString));
            UF_CALL(UF_ATTR_assign((*curveSet[i].trim_)[j]->curve, const_cast<char*>(GroupFlagTitle), attrValueGroupFlag));
        }
        if (cae == UPType)
            attrValueTypeString.value.string = const_cast<char*> (UPAssist);
        else
            attrValueTypeString.value.string = const_cast<char*> (DwAssist);
        for (int j = 0; j < curveSet[i].assist_->size(); j++)
        {
            UF_CALL(UF_ATTR_assign((*curveSet[i].assist_)[j]->curve, const_cast<char*>(curveTypeTitle), attrValueTypeString));
            UF_CALL(UF_ATTR_assign((*curveSet[i].assist_)[j]->curve, const_cast<char*>(GroupFlagTitle), attrValueGroupFlag));
        }
    }
}

size_t CurveAttrE::getAllTrimCurves(vector<tag_t>& curves)
{
    UF_initialize();
    int subtype = 0;
    int type = 0;
    tag_t obj = NULL_TAG;
    bool flag = false;
    UF_VIEW_cycle_objects(0, UF_VIEW_VISIBLE_OBJECTS, &obj);
    curves.clear();
    while (NULL_TAG != obj)
    {
        UF_OBJ_ask_type_and_subtype(obj, &type, &subtype);
        if (type == UF_line_type &&type == UF_circle_type)
        {
            UF_ATTR_find_attribute(obj, UF_ATTR_string, const_cast<char*>(curveTypeTitle),&subtype);
            if (UF_ATTR_string== subtype)
                curves.push_back(obj);
        }
        UF_VIEW_cycle_objects(0, UF_VIEW_VISIBLE_OBJECTS, &obj);
    }
    return curves.size();
}
